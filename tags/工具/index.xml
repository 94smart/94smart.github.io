<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工具 on 移或移不动的互联网</title><link>http://blog.94smart.com/tags/%E5%B7%A5%E5%85%B7/</link><description>Recent content in 工具 on 移或移不动的互联网</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 19 Mar 2008 11:16:59 +0000</lastBuildDate><atom:link href="http://blog.94smart.com/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>继续流水账：Wiki和协作、沟通</title><link>http://blog.94smart.com/posts/1230/</link><pubDate>Wed, 19 Mar 2008 11:16:59 +0000</pubDate><guid>http://blog.94smart.com/posts/1230/</guid><description>关于Wiki，水是这样流下来的：
前传：对于Wiki和维基百科我是早有了解，05-06年的时候曾经先后用CooCooWakka和MediaWiki在94smart.com架过，基本都是玩两下就放弃了，当时好像是因为编写习惯和权限设置的问题。 去年11月开始看《维基经济学》，可能是因为个人口味不同，这本书读到今年也没读完，也不打算继续读下去了。 今年二月底公司开始培训新的内部办公工具（据说是EA内部使用很久的组合方式），其中之一就是用Wiki写工作报告，起先我很不理解曾在twitter上说：&amp;ldquo;有人听说过，用MediaWiki作公司内部报告系统的吗？&amp;quot;，言下之意相当的不屑。 在看了大BOSS写的快速入门后，在Wiki填充内容，从[[给文档加链接]]开始，起初不适应Wiki代码，网上搜索了很久也没找到合适的所见即所得编辑器，最后只好继续手写代码，还好后来习惯了。 我们需要把个人简历、联系方式及工作报告都填进去，就现在来看在Wiki里面写简历不是很舒服，所以我在Blog上写了个非公司版本的个人简历。 起先发现在Wiki里面的图片好像都不直接加外链，多数都是连图片描述页，也许是为了方便其他人补充说明或评论吧。 Wiki好像不是用来发布纯文本重复内容的工具吧？我认为内部链接才是Wiki的王道，能连接内部内容绝对不考虑外部链接。 使用Wiki一段时间，其间又看了些Wiki的相关资料，发现之前的部分理解有误，我很想收回之前说过的话，其实用Wiki进行工作报告是有实际意义的。 公司的内部办公工具主要由内容发布/知识库、邮件、文件版本控制及论坛组成，MediaWiki架设的Wiki主要负责工作记录/报告、内部事项通知、经验分享及岗位培训等内容发布。 Wiki的优点在于强调文档结构化，在内部关联上处理得很合适，且用户不需了解复杂的代码即可进行超文本内容编写，牺牲了部分灵活换来了相对容易的协作。 另外，Wiki可以作为Web版的文档版本管理工具，可以比对修改、恢复历史内容等。 Wiki的文档可以很开放，用来做知识库、新闻、个人资料、通讯录、Blog、Life Stream等都很合适，我现在就用Wiki来做网摘（并用ROR写了一个网摘的Wiki代码生成器）。 Wiki需要制定现实中的更新规范，比如谁可以编辑这里谁不行之类的。 最近总是听见公司同事喊：把某某事情写在Wiki里。我觉得Wiki还是作备忘吧，并不能代替直接、实时的沟通。 其实工具就是工具，不止是Wiki、CVS、SVN这些协作相关的，最后还是需要通过各种形式的直接沟通去解决冲突问题。 幻想一下，如果在Wiki监视的页面可以通过im提醒就好了，邮件提醒还是比较不及时。 我开始看好用Wiki进行内部网建设，因为贡献内容的用户可以非常多，基于工作原因大多数人都需要别人更好的协作、配合，所以贡献的内容可以比较靠谱。 …… 本流水账可以写完，多亏互联网有twitter的存在~ 还好有twitter，让我可以随时把想法发出来，不用憋很久憋成blog，也许憋到后来都忘光了、没感觉了；还要感谢twitter，因为它丢信息不是特别的频繁，让我可以找到之前记下的内容。
Technorati : Wiki, 协作, 工作报告, 沟通, 知识库</description></item><item><title>Prism，WebRunner及WebApp专用浏览器</title><link>http://blog.94smart.com/posts/1208/</link><pubDate>Tue, 30 Oct 2007 07:16:34 +0000</pubDate><guid>http://blog.94smart.com/posts/1208/</guid><description>WebRunner，最早是在刀枪Blue上看到，是个可以把WebApp变成桌面快捷的浏览器工具，说白了就是给网页套一个浏览器的壳，每个WebApp就是一个单独窗口的专用浏览器。 它的核心使用和Firefox一样的Gecko，0.7版已经提供包括Gmail、Google Calendar、Google Docs、Google Groups、Google Analytics、Google Reader、Facebook、Twitter等一堆实用App，除此之外还可以自制WebApp（稍微有点繁琐），甚至连界面风格也可以重定义（但我没有成功~）。 Prism是WebRunner进入Mozllia Labs后的正式项目，只要填写简单的信息，就可以很方便的将网站自定义WebApp，而不用像WebRunner那样要经过编辑INI、打包等一系列有些繁琐的过程。 Prism，WebRunner这类WebApp专用浏览器解决了单应用网站的性能优化问题，可以独立存储Cookie等该应用相关数据，并将WebApp封装、桌面化。 Prism和WebRunner的WebApp与桌面程序相比，有好有坏：
跨操作系统平台，Windows、Macosx、Linux等通用。 可通过CSS重新定制显示界面。 必须安装相应运行环境，就像使用Java程序必须装JRE一样。 不能与系统其他应用做交互，比如文件拖拽动作等。 同系列（如Google）WebApp间不能互动。 不能成为某些格式（如.doc）文件的打开工具。 它们又让我想起一些相关的事物：
若干年前有一种将网站打包为执行文件的工具，当时看过的不少这么做成的电子书； 早前带有唱片信息的MP4音乐可执行文件； 招商银行个人银行专业版客户端。 前两件都只是可读的，套用到浏览器，大概属于离线浏览模式，并不是在线实时的，但是它们有个共同点，就是自执行且不用依赖除系统以外的运行环境。如果增加在线互动，这类就有望成为WebApp专用浏览器。 第三件是我能想起来的最成功的专用浏览器，招商银行个人银行专业版整合了一卡通和信用卡的所有Web功能（当然有些功能Web上是没有的），很多功能更直接调用Web端的，已经比较接近WebApp专用浏览器了，但如果没有IE环境它也还是运行不了。 嘿，不知不觉写了这么多，赶紧收尾吧~ 最后，让我们来为未来WebApp专用浏览器展望：
跨操作系统平台。 独立封装WebApp，数据、信息、界面都可自行存储。 轻量级，无需软件环境即可运行。 可安装、卸载。 性质同桌面应用，可与其他应用（桌面或Web）交互，可作为文件的默认打开程序。 每个网站都可提供自己网站专用的WebApp浏览器。 有发布商代理特定类型浏览器的广告。 …… Technorati : Firefox, Gecko, Mozilla, Prism, WebApp, WebRunner, XUL, 浏览器</description></item><item><title>Microsoft Expression Studio小试加闲扯</title><link>http://blog.94smart.com/posts/1205/</link><pubDate>Mon, 22 Oct 2007 05:28:48 +0000</pubDate><guid>http://blog.94smart.com/posts/1205/</guid><description>这件事情再次证明，让反感微软Web环境的人去试用Expression Studio是多么得奇怪。 我试用了Expression Studio部分感兴趣的应用，包括Expression Web、Expression Blend和Expression Design的部分功能，主要是冲着他们对外宣传的Web方面功能，没想到Expression Web和Expression Design如此一般，远不如Photoshop和Dreamweaver，倒是跟Web关系最小的Expression Blend效果还不错。 试用情况说完了，下面来扯一下： 9年前，我以FrontPage开始，对HTML和网站制作进行部分了解，但直到碰上DreamWeaver后，我才认识到FrontPage把我带歪了。 这些年，做网站最顺手的工具莫过于Photoshop和Dreamweaver了，后来他们的所属公司Adobe和Macromedia合并造就了新的Web建设套件：Adobe Creative Suite 3（简称CS3），达成在这个领域的独霸，微软当然不甘心，于是发布整合图形设计、网站制作、动态交互设计等的Expression Studio，但是愿望终归是愿望，我就不太看好他。 我不是微软的Fans，虽对Expression Studio有一定的反感，但还是佩服微软硬撼Adobe的决心，居然耗这么长时间（好多好多年了）开发这个套件，原想微软Fan们也许会喜欢，但我问了几个公司里面的MS铁杆，却都说不看好或不大喜欢的。 但是不可否认，Expression Studio对.Net架构有一定优化，用惯Visual Studio .Net和ASP.net的朋友应该会适应他的UI，在此还是推荐一下。 扯完~
Technorati : Adobe CS3, Expression Blend, Expression Design, Expression Studio, Expression Web, Microsoft, 微软</description></item><item><title>Axure RP Pro 4.6的功能又强大不少</title><link>http://blog.94smart.com/posts/1204/</link><pubDate>Fri, 19 Oct 2007 10:02:28 +0000</pubDate><guid>http://blog.94smart.com/posts/1204/</guid><description>上个月21号Axure发布了Axure RP Pro 4.6.2.946，这个版的功能又完善不少，前一阵用4.4版做项目的时候发现几个简单的效果没法实现，昨天装了4.6版，感觉还是不错的。 主要完善了以下实用功能：
文本输入框增加诸多实用选项，如密码遮照效果等。 增加横向和纵向菜单，不用再用动态面板（Dynamic Panels）模拟了。 支持变量（Variables）设定，和动态面板（Dynamic Panels）配合可以实现输入检查。 支持条件语句（Conditional Logic），IF..ELSE变为可能，方便进行界面逻辑控制，登录模拟也真实多了。 支持模块（Masters）的事件抛出（Raised Events），在不同页表现同一模块可以做不同的操作。 以上是我比较关注的功能，其他还有不少变化，详见Axure的特性描述页。 延伸阅读：
更多技巧可以看Axure网站的例程页和线上教学页。 Axure RP Pro 4.6.2.946的下载地址。 p.s.说实话，用Axure有一段时间了，总是感觉用起来欲罢不能的，恨不得把所有效果、可能性都表现在原型里面，导致美术设计人员会抱怨这样束手束脚的，残念呀~但淘宝UED都用Axure规划，使我很佩服他们的UI设计人员。
Technorati : Axure, Axure RP Pro, Prototype, Wireframe, 交互设计, 工具</description></item></channel></rss>