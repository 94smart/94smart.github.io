<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>分享体系 on 移或移不动的互联网</title><link>http://blog.94smart.com/tags/%E5%88%86%E4%BA%AB%E4%BD%93%E7%B3%BB/</link><description>Recent content in 分享体系 on 移或移不动的互联网</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 25 Dec 2007 06:52:21 +0000</lastBuildDate><atom:link href="http://blog.94smart.com/tags/%E5%88%86%E4%BA%AB%E4%BD%93%E7%B3%BB/index.xml" rel="self" type="application/rss+xml"/><item><title>研究笔记：Twitter的简单分享体系</title><link>http://blog.94smart.com/posts/1223/</link><pubDate>Tue, 25 Dec 2007 06:52:21 +0000</pubDate><guid>http://blog.94smart.com/posts/1223/</guid><description>前两篇分享体系相关的笔记写了Pownce、Soup.io，接下来需要翻过头来再次研究twitter，我个人认为当之无愧的（自说自话的）微网志鼻祖。 虽说twitter简单，那只是表面的简单：
twitter看上去简单到只分享文字信息，但不简单的是，它把微网志、即时消息/回复（@id前缀）、定向消息（d指令）混合在一起。 当然链接也可以，twitter会自动将文字里的网址转换为可点击的链接。p.s.tinyurl类的短Url应用也在twitter的激发下被广泛使用。 以&amp;quot;What are you doing?&amp;quot;（你在干嘛？）为题，不停的答复着，自说自话着。 但，有多少人真正是在回答这个问题呢（我的好友就很少照做），尤其是gtalk、twitterfox、twhirl等tw应用的流行，现在的twitter已经变成了带群聊功能的IM。 twitter将好友的概念实质化，加好友变成跟随（follow），单方面的相当于订阅，双方面确认的是好友关系。 twitter的分享有一定权限划分，分几个层次： 跟随用户和收藏内容为任何人可见 更新内容可以限制只有好友可见 @id前缀的回复内容被同样跟随该id的用户可见 d指令定向消息只有对应用户可以看到 被跟踪数量和资料只用户自己可见 twitter的网站我很少去，除了为加好友等特定功能外，能不用就不用，因为我觉得twitter网站交互性不够好，不能总是没完没了地刷新页面。 好在twitter提供imbot，用gtalk就很方便的互动起来，而且它提供丰富的API，除了twhirl等纯客户端外，还有twitterfox、twiiterbar等firefox插件，另外还有一批特殊应用将twitter可以共享的内容无限扩大，比如twitterfeed可以把feed按自定规则发布到twitter，其中长地址还自动转换为tinyurl。 twitter可以自定义部分页面CSS。 可以通过手机短信、wap移动更新、分享。 使用Amazon S3服务存储用户的头像文件。 页面用户信息使用vcard。 为了这个系列的统一，我还是放出这个简单到不行的分享架构图： 分享体系这个系列，我已经写到第三篇了，也许还会有第四篇、第五篇……这个系列一半为了工作需要，一半为了记录自己的即时想法，如有不同意见欢迎留言或gtalk交流，有些内容没有提到是因为我一时还没有理解，也欢迎来点化我，我会在不影响原文的基础上进行补充。 p.s.我现在使用twitterfeed发布Google Reader的阅读分享，一般每天发布也就在一个小时内进行，且数量很有限，应该还不够干扰别人的视线。
Technorati : API, IM, MicroBlogging, twitter, 分享体系, 微网志</description></item><item><title>研究笔记：美味汤Soup.io的分享体系</title><link>http://blog.94smart.com/posts/1219/</link><pubDate>Mon, 26 Nov 2007 10:37:30 +0000</pubDate><guid>http://blog.94smart.com/posts/1219/</guid><description>美味汤Soup.io我是今天才知道的网站，之所以叫她美味汤是因为她本身提供文字、引用摘要、链接、图片及视频发布外，还可以融入很多不同类的包括美味书签del.icio.us、twitter、flickr、digg、youtube等流行的元素，她这样的特性让我想起了已经被G.F.W掉的Vox。（p.s.说到Vox，我还是挺喜欢用的，可惜被墙了:( ） 和Vox有一些相似点：
都以分享、展示为主要目的。 都可以聚合（混合）其他应用的数据元素，比如flickr、youtube等。 自选显示界面模板 当然Soup.io跟Vox并不是一类的应用（放在一起说纯粹是因为我的个人爱好），她有自己的特点：
Soup.io定位为剪贴板，可以贴出非常丰富的页面。 她无需注册，即可发布分享内容、导入内容。 p.s.分享的时候快一点永远是令人喜欢的，其实就是开一个匿名帐号（或公共帐户），这算是一个不错的引子，当你试用后觉得好用的话可以通过快速入口注册成正式用户。 发布内容包括文字、引用摘要、链接、图片及视频，给我的感觉Soup.io更倾向于视觉上的分享，音乐和其他文件并不在主要分享范围内。 导入更加开放，可融入更多的元素，比如包括twitter和jaiku在内的几种微网志内容、美味书签del.icio.us的网摘、在Ebay的（商品）信息、Vox的更新内容等等，如果还觉得不够，可以直接使用RSS格式导入其他内容。 自定义界面，包括字体、字号、前景背景颜色等，还可以修改CSS。 现阶段Soup.io有些部分还很薄弱：
Soup.io有好友系统，但并没有分享权限的设置。p.s.也许分享就应该是广博的。 也许是以展示用户自己分享信息为主，好友的分享信息没有很好地体现出来。 暂时没有可以和桌面互动的方法，我没听说她如Twitter一样有众多IM和客户端作为发布工具，也没有Pownce那种功能性十足且够眩的Air客户端。 最后补充一张图，暂时记录这么多，更深入的有待我去整理。 p.s.我并不喜欢网间传播Soup.io的时候，用瘦皮猴这个名字，不够形象。 **Update1：**soup.io的IO意在输入输出，好多人把他定义为Life Streaming还是挺合适的。 **Update2：**上传文件存储在自己的服务器上，这样未来的发展瓶颈可能会出现在文件服务器的负载上，为啥不学习Pownce和Twitter把文件上传到S3之类的服务器上呢？
Technorati : MicroBlogging, Pownce, RSS, Vox, soup.io, twitter, 分享体系, 微网志, 美味汤, 聚合</description></item><item><title>研究笔记：Pownce的分享体系</title><link>http://blog.94smart.com/posts/1217/</link><pubDate>Mon, 19 Nov 2007 11:31:01 +0000</pubDate><guid>http://blog.94smart.com/posts/1217/</guid><description>除了不能使用中文，我觉得Pownce还是很不错的。 今天粗浅的整理了一下，画了张图： 然后随便说说Pownce的产品架构：
分享是Pownce的核心功能，并依据用户间的关系来限制分享内容的范围、权限。 支持文本（twitter类碎碎念）、超链接、文件、事件日程格式的分享。 文本方面并不如twitter那么好用，而且因为不支持中文（我英文又很菜），用得很少。 超链接分享应该是一个亮点，除了文本链接这种形式，还支持引用Flickr、Youtube等图片/视频/音乐站的内容，可以直接将该内容显示在页面上。 文件方面就马马虎虎了，对10M以下的文件支持还可以，使用的是Amazon文件存储服务S3，所以并不适合大量文件的共享，因为超出的容量是要花钱的。 使用微格式（MicroFormats）完成个人信息（地址等）、好友信息（hCard）、事件日程（hCalendar）等信息的发布，并支持XFN来用网页形成关系网络，好像很方便日后的数据导出。 Server端，Pownce可谓LAMP架构的典型代表，使用Debian+Apache+Mysql+Python和django。 客户端使用比较先进的（还在测试中的）Adobe Air，感觉还不错。 p.s.不过Air的应用有通病，就是点击关闭就直接关闭，我好像还没看过最小化到任务栏的应用。 Pownce开放API方便第三方开发基于客户端、Web的mashup产品。 看上去很简洁，其实Pownce表现出的精简只是暂时的表面现象，Pownce未来可以扩展得更全面、更复杂。 扯开一点说，Pownce抓住的是网络功能一个比较重要的部分，内容的分享，且是小型内容的分享。为什么这么说呢？大容量内容完全可以使用FTP、BT、emule解决，但是小文件呢？网络硬盘很好，但是要分享需要操作的步骤比较多：找地方上传、找地方发布、把URL通过IM发给需要的人……实情可能更繁琐，但是现在微网志应用满街飞的情况下，越来越多的人通过微网志分享自己的内容，用Pownce基本可以一步到位。 扯回来，Pownce的分享体系值得研究，国内有不少有实力可以做到Pownce的应用（这里并不是指复制），就看他们愿不愿意了。 ok，今天的笔记结束~ **Update：**Pownce分享类型其实很明确，无论是文字、链接、文件还是日程安排，这些类型基本上都是唯一的，用户只用考虑分享内容的格式就好了，例如链接是图片、视频还是音乐的都无所谓，全部由系统来特定呈现。
Technorati : MicroBlogging, MicroFormats, Pownce, event, file, im, link, text, 分享体系, 微网志</description></item></channel></rss>